{{/* Define all novel JSON URLs */}}
{{ $novelUrls := dict 
  "hh" "https://github.com/YuushaExa/novels-end/raw/main/result/%E5%B8%9D%E9%9C%B8.json"
  "novel2" "https://github.com/YuushaExa/novels-end/raw/refs/heads/main/result/%E6%AD%A6%E7%85%89%E5%B7%94%E5%B3%B0.json"
  "novel3" "https://github.com/YuushaExa/novels-end/raw/refs/heads/main/result/%E8%BC%AA%E8%BF%B4%E6%A8%82%E5%9C%92.json"
}} 
{{ range $novelId, $url := $novelUrls }}
  {{/* Fetch remote JSON */}}
  {{ $remoteData := resources.GetRemote $url (dict "headers" (dict "Accept" "application/json")) }}
  {{ if $remoteData }} 
    {{ $data := $remoteData.Content | transform.Unmarshal }}
    
    {{/* Process chapters */}} 
    {{ if $data.chapters }}
      {{ range $index, $section := $data.chapters }}
        {{ $content := $section.content 
                      | replaceRE `\\r\\n` "\n"  
                      | replaceRE `\r\n` "\n"   
                      | replaceRE `\n+` "\n\n" }}
        
        {{ $page := dict
          "content" (dict "mediaType" "text/markdown" "value" $content)
          "kind" "page"
          "params" (dict 
            "title" $section.title
            "chapter" (add $index 1)
            "id" $novelId
            "novel_id" $novelId
          )
          "path" (printf "%s/%d" $novelId (add $index 1))
          "title" $section.title
        }}
        {{ $.AddPage $page }}
      {{ end }}
    {{ end }}
  {{ else }}
    {{ warnf "Failed to fetch novel: %s from %s" $novelId $url }}
  {{ end }}
{{ end }}
